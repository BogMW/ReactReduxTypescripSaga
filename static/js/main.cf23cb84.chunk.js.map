{"version":3,"sources":["features/history/store/historyStore.ts","features/loading/loadingStore.ts","app/axios.ts","common/apiClient.ts","api/predict.ts","utils/handleErrorSaga.ts","features/predict/store/predictSagas.ts","features/predict/store/predictStore.ts","features/predict/store/predictSelectors.ts","features/predict/Predict.tsx","features/history/store/historySelectors.ts","features/history/History.tsx","app/router.tsx","features/loading/loadingSelectors.ts","features/loading/Loading.tsx","components/header/Header.tsx","app/App.tsx","app/rootSaga.ts","app/store.ts","initialHistory.ts","serviceWorker.ts","index.tsx","features/predict/Predict.module.scss","components/header/Header.module.scss","features/history/History.module.scss","features/loading/Loading.module.scss"],"names":["initialState","history","localStorage","getItem","undefined","JSON","parse","reducerSlice","createSlice","name","reducers","setHistory","state","action","payload","actions","isLoading","startLoading","stopLoading","instance","axios","create","baseURL","window","API_BASE_URL","defaults","headers","post","reqInterceptor","interceptors","request","use","console","log","error","Promise","reject","eject","respInterceptor","response","CancelToken","config","source","call","cancelToken","token","result","data","cancelled","cancel","url","method","apiClient","get","urlParams","optionalConfig","params","fetchNationalityApi","fetchGenderApi","handleErrorSaga","toastr","message","fetchDataSaga","put","all","nationality","gender","country","length","searchItem","id","Date","now","country_id","info","setGenderData","setNationalityData","watchNationalitySagas","watchPredictSagas","probability","count","resetData","fetchData","createAction","takeLatest","getState","predict","getNationality","createSelector","getGender","Predict","dispatch","useDispatch","useState","setName","nationalityData","useSelector","genderData","countryName","useMemo","isDataExist","nameInfo","dispatchData","useCallback","firstName","resetDataDispatch","handleChangeName","e","target","value","handleSearch","handleSearchAnother","search","className","styles","inputWrapper","label","htmlFor","input","onChange","type","submit","onClick","wrapper","getHistory","columns","dataField","text","sort","History","historyDate","style","title","tableWrapper","headerClasses","tableHeader","keyField","striped","hover","condensed","withRouter","location","useLocation","dir","path","exact","component","to","getIsLoading","loading","Loading","color","height","width","ROUTER_CONFIG","Header","currPath","pathname","header","logo","nav","map","route","isActive","navItemActive","navItem","App","timeOut","newestOnTop","preventDuplicates","position","transitionIn","transitionOut","progressBar","closeOnToastrClick","rootSaga","fork","sagaMiddleWare","createSagaMiddleWare","store","configureStore","reducer","predictReducer","loadingReducer","historyReducer","toastrReducer","middleware","next","setItem","stringify","run","createBrowserHistory","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.cf23cb84.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport interface Search {\r\n  id: number;\r\n  name: string;\r\n  gender: string;\r\n  country: string;\r\n}\r\n\r\nconst reHydrateStore = () => {\r\n  if (\r\n    localStorage.getItem('appHistory') !== null &&\r\n    localStorage.getItem('appHistory') !== undefined\r\n  ) {\r\n    return JSON.parse(localStorage.getItem('appHistory') || '{}');\r\n  }\r\n  return { history: [] };\r\n};\r\n\r\nexport interface HistoryState {\r\n  history: Search[];\r\n}\r\n\r\nconst initialState: HistoryState = {\r\n  history: reHydrateStore().history || [],\r\n};\r\n\r\nexport const reducerSlice = createSlice({\r\n  name: 'historyReducer',\r\n  initialState,\r\n  reducers: {\r\n    setHistory: (state, action): void => {\r\n      state.history = [...state.history, action.payload];\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setHistory } = reducerSlice.actions;\r\n\r\nexport default reducerSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport interface LoadingState {\r\n  isLoading: boolean;\r\n}\r\n\r\nconst initialState: LoadingState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const reducerSlice = createSlice({\r\n  name: 'loadingReducer',\r\n  initialState,\r\n  reducers: {\r\n    startLoading: (state): void => {\r\n      state.isLoading = true;\r\n    },\r\n    stopLoading: (state): void => {\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { startLoading, stopLoading } = reducerSlice.actions;\r\n\r\nexport default reducerSlice.reducer;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: window.API_BASE_URL,\r\n});\r\n\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\nconst reqInterceptor = axios.interceptors.request.use(\r\n    request => {\r\n        console.log('[INTERCEPTOR_REQUEST]:', request);\r\n        return request;\r\n    },\r\n    error => {\r\n        console.log('[INTERCEPTOR_REQUEST][ERROR]:', error);\r\n        return Promise.reject(error);\r\n    },\r\n); // only for errors that request sending failed. For respond error use next\r\n\r\naxios.interceptors.request.eject(reqInterceptor);\r\n\r\nconst respInterceptor = axios.interceptors.response.use(\r\n    response => {\r\n        console.log('[INTERCEPTOR_RESPONSE]:', response);\r\n        return response;\r\n    },\r\n    error => {\r\n        console.log('[INTERCEPTOR_RESPONSE][ERROR]:', error);\r\n        return Promise.reject(error);\r\n    },\r\n);\r\n\r\naxios.interceptors.response.eject(respInterceptor);\r\n\r\nexport const CancelToken = axios.CancelToken;\r\n\r\nexport default instance;\r\n","/* eslint-disable */\r\nimport { AxiosRequestConfig } from 'axios';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { call, cancelled } from 'redux-saga/effects';\r\nimport axios, { CancelToken } from '../app/axios';\r\nimport { DataModificationPayload } from './types';\r\n\r\ninterface Get {\r\n  <T = any | null, R = T>(\r\n    url: string,\r\n    urlParams?: any,\r\n    config?: AxiosRequestConfig\r\n  ): SagaIterator<R>;\r\n}\r\ninterface Post {\r\n  <T = any | null, R = T>(\r\n    url: string,\r\n    data?: DataModificationPayload | FormData | any,\r\n    config?: AxiosRequestConfig\r\n  ): SagaIterator<R>;\r\n}\r\n\r\nexport function* request(config: AxiosRequestConfig = {}): SagaIterator {\r\n  const source = CancelToken.source();\r\n  try {\r\n    const result = yield call(axios.request, {\r\n      cancelToken: source.token,\r\n      ...config,\r\n    });\r\n    return result.data;\r\n  } finally {\r\n    if (yield cancelled()) {\r\n      source.cancel();\r\n    }\r\n  }\r\n}\r\n\r\nconst get: Get = (\r\n  url: string,\r\n  urlParams: any = {},\r\n  config: AxiosRequestConfig = {}\r\n) => {\r\n  return request({\r\n    method: 'get',\r\n    url: url,\r\n    params: { ...urlParams },\r\n    ...config,\r\n  });\r\n};\r\nconst post: Post = (url: string, config: AxiosRequestConfig = {}) => {\r\n  return request({\r\n    method: 'post',\r\n    url: url,\r\n    ...config,\r\n  });\r\n};\r\n\r\nexport interface Client {\r\n  get: Get;\r\n  post: Post;\r\n}\r\n\r\nconst apiClient = {\r\n  get: (url: string, urlParams?: any, optionalConfig?: AxiosRequestConfig) =>\r\n    get(url, urlParams, optionalConfig),\r\n  post: (url: string, data: DataModificationPayload, optionalConfig = {}) =>\r\n    post(url, data, optionalConfig),\r\n};\r\n\r\nexport default apiClient;\r\n","import { SagaIterator } from 'redux-saga';\r\nimport { Nationality } from '../features/predict/store/predictStore';\r\nimport apiClient from '../common/apiClient';\r\n\r\nexport function fetchNationalityApi(\r\n  payload: string\r\n): SagaIterator<Nationality> {\r\n  return apiClient.get(`https://api.nationalize.io/?name=${payload}`);\r\n}\r\n\r\nexport function fetchGenderApi(payload: string): SagaIterator {\r\n  return apiClient.get(`https://api.genderize.io/?name=${payload}`);\r\n}\r\n","import { call } from '@redux-saga/core/effects';\r\nimport { AxiosError } from 'axios';\r\nimport { toastr } from 'react-redux-toastr';\r\n\r\nexport function* handleErrorSaga(error: AxiosError) {\r\n  console.error(error);\r\n  yield call(toastr.error, 'Server error', error.message);\r\n}\r\n","import { put, call, all } from 'redux-saga/effects';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { PayloadAction } from '@reduxjs/toolkit';\r\nimport { toastr } from 'react-redux-toastr';\r\nimport {\r\n  setNationalityData,\r\n  setGenderData,\r\n  Gender,\r\n  Nationality,\r\n} from './predictStore';\r\nimport { setHistory, Search } from '../../history/store/historyStore';\r\nimport { startLoading, stopLoading } from 'src/features/loading/loadingStore';\r\nimport { fetchNationalityApi, fetchGenderApi } from 'src/api/predict';\r\nimport { handleErrorSaga } from 'src/utils/handleErrorSaga';\r\n\r\nexport function* fetchDataSaga(action: PayloadAction<string>): SagaIterator {\r\n  try {\r\n    yield put(startLoading());\r\n    const [nationality, gender]: [Nationality, Gender] = yield all([\r\n      call(fetchNationalityApi, action.payload),\r\n      yield call(fetchGenderApi, action.payload),\r\n    ]);\r\n    const hasFullInfo = nationality.country.length > 0 && gender.gender !== '';\r\n    if (hasFullInfo) {\r\n      const searchItem: Search = {\r\n        id: Date.now(),\r\n        name: nationality.name,\r\n        gender: gender.gender,\r\n        country: nationality.country[0].country_id,\r\n      };\r\n      yield put(setHistory(searchItem));\r\n    } else {\r\n      yield call(toastr.info, 'Information', 'There are no data for such name');\r\n    }\r\n    yield put(setGenderData(gender));\r\n    yield put(setNationalityData(nationality));\r\n  } catch (error) {\r\n    yield call(handleErrorSaga, error);\r\n  } finally {\r\n    yield put(stopLoading());\r\n  }\r\n}\r\n","import { createSlice, PayloadAction, createAction } from '@reduxjs/toolkit';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { all, call, takeLatest } from 'redux-saga/effects';\r\nimport { fetchDataSaga } from './predictSagas';\r\n\r\nexport interface Nationality {\r\n  name: string;\r\n  country: Country[];\r\n}\r\n\r\nexport interface Gender {\r\n  name: string;\r\n  gender: string;\r\n  probability: number;\r\n  count: number;\r\n}\r\n\r\nexport interface Country {\r\n  country_id: string;\r\n  probability: number;\r\n}\r\n\r\nexport interface PredictState {\r\n  nationality: Nationality;\r\n  gender: Gender;\r\n}\r\n\r\nconst initialState: PredictState = {\r\n  nationality: {\r\n    name: '',\r\n    country: [\r\n      {\r\n        country_id: '',\r\n        probability: 0,\r\n      },\r\n    ],\r\n  },\r\n  gender: {\r\n    name: '',\r\n    gender: '',\r\n    probability: 0,\r\n    count: 0,\r\n  },\r\n};\r\n\r\ninterface SetPredictPayload {\r\n  name: string;\r\n}\r\n\r\nexport const reducerSlice = createSlice({\r\n  name: 'predictReducer',\r\n  initialState,\r\n  reducers: {\r\n    setNationalityData: (state, action: PayloadAction<Nationality>): void => {\r\n      state.nationality = action.payload;\r\n    },\r\n    setGenderData: (state, action: PayloadAction<Gender>): void => {\r\n      state.gender = action.payload;\r\n    },\r\n    resetData: (state): void => {\r\n      state.nationality = initialState.nationality;\r\n      state.gender = initialState.gender;\r\n    },\r\n  },\r\n});\r\n\r\nexport const fetchData = createAction<string>('predict/fetchNationality');\r\n\r\nfunction* watchNationalitySagas(): SagaIterator {\r\n  yield takeLatest(fetchData, fetchDataSaga);\r\n}\r\n\r\nexport function* watchPredictSagas(): SagaIterator {\r\n  yield all([call(watchNationalitySagas)]);\r\n}\r\n\r\nexport const {\r\n  setNationalityData,\r\n  setGenderData,\r\n  resetData,\r\n} = reducerSlice.actions;\r\n\r\nexport default reducerSlice.reducer;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nimport { RootState } from 'src/app/store';\r\n\r\nimport { PredictState } from './predictStore';\r\n\r\nconst getState = (state: RootState): PredictState => state.predict;\r\n\r\nexport const getNationality = createSelector(\r\n  getState,\r\n  (state: PredictState) => state.nationality\r\n);\r\n\r\nexport const getGender = createSelector(\r\n  getState,\r\n  (state: PredictState) => state.gender\r\n);\r\n","import React, { useState, useCallback, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { get } from 'lodash';\r\nimport { fetchData, resetData } from '../predict/store/predictStore';\r\nimport { getNationality, getGender } from './store/predictSelectors';\r\nimport styles from './Predict.module.scss';\r\n\r\nexport function Predict() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n\r\n  const nationalityData = useSelector(getNationality);\r\n  const genderData = useSelector(getGender);\r\n\r\n  const countryName = useMemo(\r\n    () => get(nationalityData, 'country[0].country_id', ''),\r\n    [nationalityData]\r\n  );\r\n\r\n  const isDataExist = useMemo(\r\n    () => countryName !== '' && genderData.gender !== '',\r\n    [countryName, genderData]\r\n  );\r\n\r\n  const nameInfo = useMemo(\r\n    () =>\r\n      `${nationalityData.name} is a ${genderData.gender} name from ${countryName}`,\r\n    [nationalityData, genderData, countryName]\r\n  );\r\n\r\n  const dispatchData = useCallback(\r\n    (firstName): void => {\r\n      dispatch(fetchData(firstName));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const resetDataDispatch = useCallback((): void => {\r\n    dispatch(resetData());\r\n  }, [dispatch]);\r\n\r\n  const handleChangeName = useCallback((e): void => {\r\n    setName(e.target.value);\r\n  }, []);\r\n\r\n  const handleSearch = useCallback(\r\n    (e): void => {\r\n      dispatchData(name);\r\n      setName('');\r\n    },\r\n    [dispatchData, setName, name]\r\n  );\r\n\r\n  const handleSearchAnother = useCallback((): void => {\r\n    resetDataDispatch();\r\n  }, [resetDataDispatch]);\r\n\r\n  const search = (\r\n    <>\r\n      <div className={styles.inputWrapper}>\r\n        <label className={styles.label} htmlFor='name'>\r\n          Enter Name:\r\n        </label>\r\n        <input\r\n          value={name}\r\n          className={styles.input}\r\n          onChange={handleChangeName}\r\n          type='text'\r\n          name='name'\r\n          id='name'\r\n        />\r\n      </div>\r\n      <div className={styles.submit} onClick={handleSearch}>\r\n        <span>Submit</span>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const result = (\r\n    <>\r\n      <div className={styles.inputWrapper}>\r\n        <div className={styles.label}>\r\n          You entered: <span>{nationalityData.name}</span>\r\n        </div>\r\n      </div>\r\n      <div className={styles.inputWrapper}>\r\n        <div className={styles.label}>\r\n          Description: <span>{nameInfo}</span>\r\n        </div>\r\n      </div>\r\n      <div className={styles.submit} onClick={handleSearchAnother}>\r\n        <span>Enter Another Name</span>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return <div className={styles.wrapper}>{isDataExist ? result : search}</div>;\r\n}\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nimport { RootState } from 'src/app/store';\r\n\r\nimport { HistoryState } from './historyStore';\r\n\r\nconst getState = (state: RootState): HistoryState => state.history;\r\n\r\nexport const getHistory = createSelector(\r\n  getState,\r\n  (state: HistoryState) => state.history\r\n);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport { getHistory } from './store/historySelectors';\r\nimport style from './History.module.scss';\r\n\r\nconst columns = [\r\n  {\r\n    dataField: 'name',\r\n    text: 'Name',\r\n    sort: true,\r\n  },\r\n  {\r\n    dataField: 'gender',\r\n    text: 'Gender',\r\n    sort: true,\r\n  },\r\n  {\r\n    dataField: 'country',\r\n    text: 'Country',\r\n    sort: true,\r\n  },\r\n];\r\n\r\nexport const History = () => {\r\n  const historyDate = useSelector(getHistory);\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n      <div className={style.title}>Historical Table</div>\r\n      <div className={style.tableWrapper}>\r\n        <BootstrapTable\r\n          headerClasses={style.tableHeader}\r\n          keyField='id'\r\n          data={historyDate}\r\n          columns={columns}\r\n          striped\r\n          hover\r\n          condensed\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// Core\r\nimport React from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  withRouter,\r\n  useLocation,\r\n} from 'react-router-dom';\r\n\r\n// Pages\r\nimport { Predict } from 'src/features/predict';\r\nimport { History } from 'src/features/history';\r\n\r\nexport const Router: React.FC = () => {\r\n  const location = useLocation();\r\n  console.dir(location);\r\n  return (\r\n    <Switch location={location}>\r\n      <Route path={'/predict'} exact component={Predict} />\r\n      <Route path={'/history'} exact component={History} />\r\n      <Redirect to={'/predict'} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default withRouter(Router);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nimport { RootState } from 'src/app/store';\r\n\r\nimport { LoadingState } from './loadingStore';\r\n\r\nconst getState = (state: RootState): LoadingState => state.loading;\r\n\r\nexport const getIsLoading = createSelector(\r\n  getState,\r\n  (state: LoadingState) => state.isLoading\r\n);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getIsLoading } from './loadingSelectors';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './Loading.module.scss';\r\n\r\nexport const Loading = () => {\r\n  const isLoading = useSelector(getIsLoading);\r\n  return isLoading ? (\r\n    <div className={styles.loading}>\r\n      <Loader type='Bars' color='#00BFFF' height={100} width={100} />\r\n    </div>\r\n  ) : null;\r\n};\r\n","import React from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nconst ROUTER_CONFIG = [\r\n  {\r\n    path: '/predict',\r\n    label: 'Predict',\r\n  },\r\n  {\r\n    path: '/history',\r\n    label: 'History',\r\n  },\r\n];\r\n\r\nexport const Header = () => {\r\n  const location = useLocation();\r\n  const currPath = location.pathname;\r\n\r\n  return (\r\n    <div className={styles.header}>\r\n      <div className={styles.logo}>Prediction App</div>\r\n      <nav>\r\n        <div className={styles.nav}>\r\n          {ROUTER_CONFIG.map(route => {\r\n            const isActive = route.path === currPath;\r\n            return (\r\n              <div>\r\n                <Link\r\n                  className={isActive ? styles.navItemActive : styles.navItem}\r\n                  to={`${route.path}`}\r\n                >\r\n                  {route.label}\r\n                </Link>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReduxToastr from 'react-redux-toastr';\r\n\r\nimport Router from './router';\r\n\r\nimport { Loading } from '../features/loading';\r\n\r\nimport { Header } from 'src/components';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Loading />\r\n      <ReduxToastr\r\n        timeOut={4000}\r\n        newestOnTop={false}\r\n        preventDuplicates\r\n        position='bottom-right'\r\n        transitionIn='fadeIn'\r\n        transitionOut='fadeOut'\r\n        progressBar\r\n        closeOnToastrClick\r\n      />\r\n      <Header />\r\n      <Router />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { all, fork } from 'redux-saga/effects';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { watchPredictSagas } from 'src/features/predict/store';\r\n\r\nexport default function* rootSaga(): SagaIterator {\r\n  yield all([fork(watchPredictSagas)]);\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleWare from 'redux-saga';\r\nimport { reducer as toastrReducer } from 'react-redux-toastr';\r\nimport predictReducer from '../features/predict/store/predictStore';\r\nimport loadingReducer from '../features/loading/loadingStore';\r\nimport historyReducer from '../features/history/store/historyStore';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleWare = createSagaMiddleWare();\r\n\r\nconst localStorageMiddleware = (store: { getState: () => any }) => {\r\n  return (next: (arg0: any) => any) => (action: any) => {\r\n    const result = next(action);\r\n    localStorage.setItem(\r\n      'appHistory',\r\n      JSON.stringify(store.getState().history)\r\n    );\r\n    return result;\r\n  };\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    predict: predictReducer,\r\n    loading: loadingReducer,\r\n    history: historyReducer,\r\n    toastr: toastrReducer,\r\n  },\r\n\r\n  middleware: [sagaMiddleWare, localStorageMiddleware],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nsagaMiddleWare.run(rootSaga);\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { history } from './initialHistory';\r\nimport 'src/resources/styles/index.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Predict_wrapper__3qzkT\",\"inputWrapper\":\"Predict_inputWrapper__2xjra\",\"label\":\"Predict_label__1dOWd\",\"input\":\"Predict_input__1NyQ5\",\"submit\":\"Predict_submit__12C44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2UBIP\",\"logo\":\"Header_logo__MzH3p\",\"nav\":\"Header_nav__2pX7F\",\"navItem\":\"Header_navItem__3R-S6\",\"navItemActive\":\"Header_navItemActive__3GjLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"History_wrapper__1IfuY\",\"title\":\"History_title__3hOQF\",\"tableWrapper\":\"History_tableWrapper__18irQ\",\"tableHeader\":\"History_tableHeader__1pBG9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__ylxPf\"};"],"sourceRoot":""}